É recomendado fazer um downgrade do node para fazer este curso. O downgrade
do node pode ser feito usando a ferramenta nvm:
    https://github.com/nvm-sh/nvm#about

curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash

Como eu fiz: baixe o arquivo no link que está no curl acima 
e rode ele no git bash:
    https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh 

A versão do node que está em uso neste momento é a 18.12.1.
Para instalar o node 10, rode: nvm install v14.21.2
Para usar esse node, rode: nvm use v14.21.2
A versão do node selecionada pelo nvm só funciona no terminal em que
você selecionou o node.

O site do cliente do angular tem um passo a passo para instalar o cliente
recomendado pelo site do Angular.
    Site do Angular: http://angular.io
    Site do cliente do Angular: http://cli.angular.io

Para listar as versões disponíveis do Angular no npm:
    npm view @angular/cli versions

Vou tentar usar a versão 10.2.4 do cliente. A versão do curso é 10.1.6.

Após rodar o npme install -g @angular/cli, o terminal vai ter o comando ng
disponível para operar com o Angular.

O passo a passo na página do cliente Angular é:
    npm install -g @angular/cli@10.2.4
    ng new bytebank
    cd bytebank
    ng serve


Ao rodar o ng new <nome-do-projeto>, vão ser feitas algumas perguntas:
    Q: Adicionar roteamento do Angular?
    A: Não, porque vai ser feito na unha.
    Q: Qual formato de folha de estivo usar?
    A: SCSS.

Ao rodar o comando pra servir a aplicação, você pode usar o parâmetro open
para abrir a página no browser após terminar de subir o server: 
    ng serve --open


Nesse curso não será necessário o uso do Strict Mode, configuração que o 
Angular ativa em todos os projetos criados pela CLI por padrão.

Por isso, será necessário fazer algumas modificações no arquivo tsconfig.json
para ter os resultados encontrados pelo instrutor nos vídeos.

Padrão de nomenclatura dos componentes no Angular:
    src/app/<nome-do-componente>
        -> <nome-do-componente>.component.ts
        -> <nome-do-componente>.component.scss
        -> <nome-do-componente>.component.html

O arquivo .ts conterá a lógica do componente, e usa a seguinte estrutura:
    import { Component } from '@angular/core';

    @Component({
        selector: 'componente', // Nome da tag para chamar o componente.
        templateUrl: './componente.component.html',
        styleUrls: ['./componente.component.scss']
    })
    export class ComponenteComponent {
        title = 'bytebank';
        // ... propriedades do componente.
    }

Instale o Angular Extension Pack no VS Code.

Dentro do arquivo angular.json há o objeto projects/<projeto atual>/prefix.
Todos os componentes dentro de <projeto atual> devem usar no seletor o prefix.

Além de definir o prefixo do seletor do componente, precisamos declará-lo no 
módulo (arquivo app.module.ts).

Sobre o SCSS:
    É possível aninhar estilos. Para isso, use o & (e comercial) mais o sufixo
    desejado para o estilo aninhado.

    Podemos declarar variáveis no SCSS, prefixando o nome da variável com --
    (dois hifens).

    Para usar a variável declarada, usamos:
        propriedadeCSS: var(--nomeDaVariavel);
        Ex.: .seletor { color: var(--primary); }

Para inserir um evento no formulário, precisamos de usar o Forms Module 
do Angular. Para isso, precisamos importá-lo no arquivo app.module.ts.

Perceba que declarar um componente do desenvolvedor é diferente de importar
um módulo do Angular. 
    1) Nas declarations, declaramos os componentes do desenvolvedor;
    2) Nos imports, importamos os módulos do Angular que queremos usar.

No Angular, inserimos parênteses na tag do componente para assosciar eventos 
ao componente. Isso é chamado event binding.

Exemplo de event binding:
    <form class="formulario" (evento)="metodoDaClasse()">
        ...
    </form>

O evento ngSubmit é mais poderoso do que o evento submit.

Quando referenciamos uma propriedade da classe do componente (conforme .ts),
ela é acessível pelo HTML do componente por meio de property binding:
    1) use a diretiva ngModel: <tag ([ngModel])="propriedade" ... >;
    2) defina o nome do objeto: 
          <tag ([ngModel])="propriedade" name="nome"> 
       ou use a diretiva ngModelOptions: 
          <tag ([ngModel])="propriedade" [ngModelOptions]="{standalone: true}">

Ao atribuir valores iniciais ao componente, eles já aparecem no componente.

Quando usamos declaramos a property binding, ele pode ser:
    1) One-way data binding: [ngModel]="propriedade"; ou
    2) Two-way data binding: ([ngModel])="propriedade".

Two-way binding permite que o HTML modifique o modelo no .ts e vice-versa.
One-way binding só permite mudanças do componente pro template (só no js).

O decorator Output serve para marcar um campo de classe como propriedade de 
saída. EventEmitter é uma interface, cujo método emit é usado para disparar o 
evento (EventEmitter representa um evento personalizado).

Quando o componente-filho (no exemplo, nova-transferencia) emite um evento, 
ele pode ser capturado pelo componente pai (no exemplo, app).

Quando submetemos o formulário:
    1)  O componente nova-transferencia invoca o seu método 
        NovaTransferenciaComponent.transferir(), que dispara aoTransferir;
    2)  O componente app captura o evento aoTransferir (EventEmitter) e o 
        trata no método AppComponent.transferir($event), que recebe como 
        parâmetro o evento que ele capturou.

Analisando do componente filho para o pai:
    NovaTransferenciaComponent (no arquivo .ts) declara:
        1)  o método decorado com @Output, cujo nome vai ser usado no event
            binding no componente pai (app);
        2)  o método a partir do qual será disparado o evento que vai ser 
            propagado para o componente pai (app).
    
    O template do AppComponent (app.component.html) declara:
        1)  o componente filho (nova-transferencia)
        2)  o event binding com o evento declarado no componente filho;
        3)  o método que será invocado do AppComponent (no .ts).

Encadeamento opcional: The ?. operator is like the . chaining operator, 
except that instead of causing an error if a reference is nullish (null or 
undefined), the expression short-circuits with a return value of undefined. 
When used with function calls, it returns undefined if the given function 
does not exist.

Traduzindo: colocando interrogação antes do ponto pode antecipar o retorno
de undefined, caso o objeto seja nulo.

Comando para gerar um novo componente no Angular:
    ng generate component <nome do novo componente>

Usamos no componente extrato o decorator Input para a property transferencia.

Qual a diferença entre os decorators Input e Output? A direção do fluxo!!!
Os dados das variáveis decoradas com Output fluem do filho para o pai. Já os
dados das variáveis decoradas com Input fluem do componente pai para o filho.

Extrato declara transferencia decorada com Input.
    O AppComponent envia o objeto transferência para ExtratoComponent.
NovaTransferencia declara aoTransferir decorada com Output.
    O AppComponent recebe evento aoTransferir de NovaTransferencia.

As propriedades são amarradas (binding) com o componente principal (app),
com os operadores de:
    event-binding = ();
    property-binding = []; ou
    2way-binding =[()].

Mas independente do binding, o envio/recepção de dados depende do decorator
usado no componente filho (Input recebe do pai, Output envia para o pai).

O asterisco antes das diretivas do Angular simplificam a criação do código
compreensível pelo Angular. Exemplo:
    <!-- Examples (A) and (B) are the same -->

    <!-- (A) *ngIf paragraph -->
    <p *ngIf="condition">
        Our heroes are true!
    </p>

    <!-- (B) [ngIf] with template -->
    <template [ngIf]="condition">
        <p>
            Our heroes are true!
        </p>
    </template>

Angular treats template elements in a special way. The * syntax is a shortcut 
that lets you avoid writing the whole <template> element.

using this:
    *ngFor="let t of todos; let i=index"

translates it into:
    template="ngFor: let t of todos; let i=index" 

which is then converted into:
    <template ngFor [ngForOf]="todos" .... ></template>

Also Agular's Structural directives like ngFor, ngIf etc. Prefixed by * just 
to differentiate them from other custom directives and components.

Fonte: https://stackoverflow.com/questions/40078189/angular-why-asterisk

O Angular dispõe de pipes, que servem para formatar valores no template HTML.
Por exemplo: o pipe date com o parâmetro shortDate formata como 'MM/DD/YYY':
    <td>{{ transferencia?.data | date: 'shortDate' }}</td>

O pipe para números decimais é assim: 
    <td>{{ transferencia?.valor | number: '1.2-2' }}</td>

    Onde:
        O 1o número é a quantidade de números antes do separador;
        O 2o número é o mínimo de números decimais;
        O 3o número é o máximo de números decimais.

Dá um BAITA trabalho para definir o LOCALE para formatação de data/hora.
Mas em resumo, é necessário configurar um provider no módulo do app.
Use no provider key-value, onde a key é provider, e o value é useValue.

Se o tipo de input não for definido como number, a string do input vai ser
considerada uma string inválida pra gerar o número.

A tag ng-template serve para declarar um elemento no componente que NÃO é 
exibido por padrão. Uma forma de exibir um ng-template é na cláusula ngIf.

Os services são usados para reúso de lógica em diferentes componentes. Os 
services são decorados com @Injectable, que recebe o parâmetro providedIn.
Esse parâmetro define onde o service é injetado. Por padrão o parâmetro é 
preenchido com a string 'root', mas podemos fornecer qualquer componente onde
o service será injetado (?).

Como o componente Extrato vai ter seu estado dependente do serviço 
TransferenciaService, o componente AppComponent não vai precisar gerenciar 
o estado das transferencias. O AppComponent só precisa injetar o 
TransferenciaService e usá-lo.

O ExtratoComponent não vai mais esperar fluxo de dados do seu pai AppComponent.
Portanto, não precisamos mais do decorator Input na variável transferencias.

A extensão Angular Schematics (?) para VS Code permite a geração automática
de componentes, serviços etc. Basta clicar com o botão direito na pasta onde
você quer o objeto e escolher qual deles você quer gerar (generate).

Agora vai ser necessário criar um servidor json para simular o banco de dados:
    npm install -g json-server

Depois, você roda o JSON Server:
    json-server --watch data/db.json

Agora você pode acessar a porta 3000. O array de transferências fica disponível
em http://localhost:3000/transferencias .

Em http://jsontots.com você consegue gerar uma interface TypeScript a partir 
do JSON que você fornecer. Depois você copia a interface para o modelo.
(Não funciono no CDTN. Alternativa: https://transform.tools/json-to-typescript)

Quando você for usar a classe HttpClient, não se esqueça de importar o módulo
HttpClientModule no módulo AppModule.

O VSCode não está importando algumas classes automaticamente (i.e. Observable).
Veja os fontes para ver onde localizar os imports.

Os Observable tem o método subscribe. Toda vez que o observável mudar, ele vai
disparar a função que foi incluída ao chamar o subscribe.
